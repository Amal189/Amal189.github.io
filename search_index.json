[["index.html", "1 Welkom", " 1 Welkom Hoi! Welkom op mijn portfolio-website. Dit is de portfolio van Jasmijnbloem. Je bekijkt nu mijn GitHub-boek, waarin ik de opdrachten en resultaten van mijn leerproces laat zien. In deze portfolio vind je onder andere: Mijn cv (Curriculum Vitae) Een opdracht waarbij ik zelfstandig een nieuwe vaardigheid heb geleerd Ik hoop dat je plezier door mijn portfolio krijgt!  .. "],["curriculum-vitae.html", "2 Curriculum Vitae 2.1 Curriculum Vitae (Nederlands) 2.2 Curriculum Vitae (English Version)", " 2 Curriculum Vitae Dit document bevat het Curriculum Vitae (CV), opgesteld met RMarkdown. Het biedt een overzicht van de opleiding, werkervaring, vaardigheden (waaronder Data Science for Biology) en persoonlijke interesses. Het CV is bedoeld ter ondersteuning bij sollicitaties voor stageplekken of functies binnen de Life Sciences of bioinformatica. 2.1 Curriculum Vitae (Nederlands) Persoonlijke Gegevens Naam: [Jasmijbloem] E-mailadres: [Jasmijn.bloem@example.com] Telefoonnummer: [06-6666666] Opleiding Hogeschool Utrecht — BSc Biologie en Medisch Laboratoriumonderzoek 2022 – heden Derdejaarsstudent met een specialisatie in Biomolecular Research. Gedurende de opleiding zijn zowel theoretische kennis als praktische vaardigheden opgedaan in laboratoriumtechnieken, bioinformatica en data-analyse. Vaardigheden en Ervaring Technische en Analytische Vaardigheden - Eiwitonderzoek: Fluorescentie, UV-VIS spectrofotometrie, Bradford- en BCA-assays - Eiwitverwerking: SDS-PAGE, Western blotting, eiwitdigestie - Moleculaire technieken: ELISA, (q)PCR, gele-elektroforese, chromatografie - Sequencing: RNA-sequencing, MinION long-read sequencing, metagenomics - Data-analyse: RStudio, SQL, data management, datavisualisatie - Programmeren: Basis coderen, versiebeheer met GitHub - Bioinformatica: Werken met proteomics tools Persoonlijke Vaardigheden - Enthousiast - Leergierig - Spontaan - Hardwerkend - Gemotiveerd Onderzoekservaring Onderzoek naar het effect van protease op alfa-amylase Theoretische Basis Sterke achtergrond in moleculaire biologie, celbiologie en biotechnologie, opgedaan via diverse vakken binnen de opleiding. Talen Nederlands Engels Arabisch Interesses Zwemmen Schrijven Lezen 2.2 Curriculum Vitae (English Version) Personal Information Name: [Jasmijbloem] Email: [Jasmijn.bloem@example.com] Phone: [06-6666666] Education Hogeschool Utrecht (HU) — BSc in Biology and Medical Laboratory Research 2022 – present Third-year student specializing in Biomolecular Research. Throughout the program, both theoretical knowledge and practical skills have been developed in lab techniques, bioinformatics, and data analysis. Skills and Experience Technical and Analytical Skills - Protein Research: Fluorescence, UV-VIS spectrophotometry, Bradford and BCA assays - Protein Processing: SDS-PAGE, Western blotting, protein digestion - Molecular Techniques: ELISA, (q)PCR, gel electrophoresis, chromatography - Sequencing: RNA sequencing, MinION long-read sequencing, metagenomics - Data Analysis: RStudio, SQL, data management, data visualization - Programming: Basic coding, version control with GitHub - Bioinformatics: Proteomics tools Personal Skills - Enthusiastic - Eager to learn - Friendly and approachable - Hardworking - Highly motivated Research Experience Research on the effect of protease on alpha-amylase Theoretical Background Strong foundation in molecular biology, cell biology, and biotechnology, developed through coursework. Languages Dutch English Arabic Interests Swimming Writing Reading Credits Dit CV is opgesteld in RMarkdown met behulp van ideeën uit het rmarkdown-pakket van RStudio en voorbeelden van r-cv "],["vooruikijken-massaspectrometrie.html", "3 Vooruikijken: Massaspectrometrie 3.1 1. Toekomstbeeld en motivatie 3.2 2. Planning 3.3 3. Uitwerking (voorbereiding) 3.4 Bronnen", " 3 Vooruikijken: Massaspectrometrie Deze opdracht is onderdeel van de cursus Workflows en richt zich op het leren van een nieuwe Data Science for Biology skill: het analyseren van massaspectrometriedata in R. De keuze voor deze skill is gebaseerd op het toekomstbeeld waarin moleculair onderzoek gecombineerd wordt met bioinformatica. 3.1 1. Toekomstbeeld en motivatie Toekomstvisie Over een tot twee jaar mijn doel is om werkzaam te zijn in een onderzoeksomgeving zoals een academisch ziekenhuis, een universiteit of een biotechnologisch bedrijf. Het liefst in een rol waarin laboratoriumonderzoek wordt gecombineerd met bioinformatica, bijvoorbeeld op het gebied van eiwitonderzoek of medicijnontwikkeling. Huidige vaardigheden Praktische ervaring met laboratoriumtechnieken zoals eiwitanalyse, sequencing, PCR Data-analyse met R, GitHub en SQL Basiskennis van bioinformatica en datavisualisatie Nieuwe skill om te leren Om dichter bij het toekomstdoel te komen, wordt gekozen voor het leren analyseren van massaspectrometriedata. Deze analysetechniek is belangrijk in proteomics en wordt gebruikt voor eiwitidentificatie en -kwantificatie. Door dit te koppelen aan R wordt geleerd hoe ruwe data wordt omgezet naar bruikbare biologische informatie. Gekozen skill: Analyseren van massaspectrometriedata in R 3.2 2. Planning Datum Activiteit Tijd (uren) Toelichting 05 mei Introductie: wat is massaspectrometrie? 2 Begrijpen van het basisprincipe, zoeken van uitlegvideo’s 06 mei Wat kun je analyseren met massaspectrometrie? 2 Uitleg over toepassingen in eiwitonderzoek 07 mei Installeren van R-packages (MSnbase, Spectra) 2 R en Bioconductor gereedmaken 08 mei Tutorial volgen: voorbeeldanalyse bekijken 3 Gebruik maken van online tutorials 09 mei Begrippen oefenen: spectra, intensiteit, massa/charge 1 Leren herkennen in voorbeelddata 10 mei Voorbeelddataset downloaden (.mzML bestand) 2 Van PRIDE database of Bioconductor 11 mei Data inlezen in R 2 Gebruik maken van MSnbase::readMSData() 12 mei Eerste grafiek maken (bijv. chromatogram of spectrum) 3 Visualisatie oefenen met 1 sample 13 mei Meer samples toevoegen, data filteren of normaliseren 3 Werken aan kwaliteit van de data 14 mei Eenvoudige analyse uitvoeren 3 Bijvoorbeeld gemiddelde intensiteit per sample vergelijken 15 mei Resultaten visualiseren (boxplot, PCA of heatmap) 3 Overzicht maken van verschillen 16 mei Alles verwerken in RMarkdown 2 Duidelijk verslag maken van je leerproces 17 mei Uploaden naar GitHub 2 Resultaat delen als bewijs Totaal: 32 uur 3.3 3. Uitwerking (voorbereiding) Voor de analyse zullen Bioconductor-tools gebruikt worden: MSnbase Spectra 3.3.1 Data Publieke massaspectrometriedata wordt gebruikt, bijvoorbeeld uit de PRIDE Archive, in .mzML formaat. 3.3.2 Analyseplan Importeren van MS-data in R Visualiseren van spectra en kwaliteitscontrole Normalisatie en filtering van data Vergelijken van experimentele condities Visualisaties maken zoals boxplots, PCA en heatmaps 3.3.3 Bewijs van verworven kennis Zelfgeschreven analysecode in een .Rmd bestand Toepassing op een nieuwe dataset Upload van code en verslag naar een GitHub-repository Reflectie op het leerproces 3.4 Bronnen MSnbase tutorial – Bioconductor Spectra package PRIDE database: https://www.ebi.ac.uk/pride/ "],["guerilla-analytics.html", "4 Guerilla analytics 4.1 DAUR2_RNAseq 4.2 Portfolio van Jasmijnbloem", " 4 Guerilla analytics Data Management volgens Guerilla Analytics In dit stukje werden de richtlijnen van Guerilla Analytics toegepast. Guerilla Analytics is een werkwijze voor datamanagement die zich richt op praktisch, flexibel en reproduceerbaar werken met data, vooral in snel veranderende of tijdelijke projecten. De kernprincipes zijn: Heldere mapstructuur: Bestanden worden logisch gescheiden in mappen zoals raw_data, data, analyses en results. Nooit wijzigen van ruwe data: De originele bestanden blijven altijd intact. Script-based workflows: Analyses worden in scripts opgeslagen om reproduceerbaarheid te geven. Transparante documentatie: Er is een README-bestand dat uitlegt wat elk bestand en elke map bevat. Snel overdraagbaar: De structuur maakt het makkelijk voor anderen om het project over te nemen of na te bouwen. Voor deze opdracht werden lege bestanden gebruikt met de juiste namen en een mappenstructuur opgezet volgens deze regels, ook al de originele data niet beschikbaar was. 4.1 DAUR2_RNAseq De mapstructuur van dit project heb ik opgebouwd met de volgende code: # Laat de structuur van de DAUR2_RNAseq-map zien. fs::dir_tree(&quot;DAUR2_RNAseq&quot;)` De verkregen FASTQ-bestanden (de ruwe data) zijn geplaatst in de map raw_data. In de map data bevinden zich twee submappen: - alignment, waarin de BAM-bestanden staan met de gemapte reads - counts, waarin de gen-tellingen en de metadata van de samples zijn opgeslagen. In de map analyses staan de scripts die zijn gebruikt voor de verwerking en analyse van de data. De map results bevat de output van deze analyses, zoals grafieken en kwaliteitsrapporten. Tot slot is er een map verslag waarin het verslag van deze opdracht is opgenomen als .Rmd-bestand, samen met het bijbehorende .html-bestand (Figuur 1). Figuur 1:Mapstructuur screenshot van DAUR2 RNA sequencing project Daarnaast werd in de README-bestand uitlegt wat elk bestand en elke map bevat (Figuur 2). Figuur 2:README screenshot van DAUR2 RNA sequencing project 4.2 Portfolio van Jasmijnbloem "],["reproduceerbare-analyse-1.html", "5 Reproduceerbare Analyse 1 5.1 C.elegans toxiciteitsexperiment 5.2 Stappenplan voor dose-response analyse 5.3 Wetenschappelijke Referenties", " 5 Reproduceerbare Analyse 1 5.1 C.elegans toxiciteitsexperiment In dit hoofdstuk wordt een analyse uitgevoerd op data uit een C. elegans-experiment. Tijdens dit experiment werden nematoden van de soort Caenorhabditis elegans blootgesteld aan verschillende concentraties van een aantal chemicaliën. De geteste stoffen zijn: 2,6-diisopropylnaphthalene, decaan, naftaleen, ethanol en S-medium. Voor de analyse zijn de volgende variabelen in de dataset relevant: RawData: het aantal nakomelingen dat is geteld per conditie. compName: de naam van het chemicalie waaraan de wormen zijn blootgesteld. compConcentration: de concentratie van het gebruikte chemicalie. expType: een aanduiding of het gaat om een experimentele conditie of een controle (negatieve controle of vehiclecontrole). De dataset is afkomstig van het HU-lectoraat Innovative Testing in Life Sciences &amp; Chemistry. Het doel van deze analyse is om de gegevens op een reproduceerbare manier te verwerken en visualiseren in een RMarkdown-bestand. Hiervoor worden de volgende R-packages gebruikt: readxl voor het inlezen van de Excel-bestanden drc voor het uitvoeren van dose-response analyse ggplot2 voor het maken van grafieken Data-inlees en inspectie Om de data correct te kunnen analyseren, is het belangrijk om de stappen zorgvuldig te doorlopen. 5.1.1 Stap 1: Data opslaan en inlezen De eerste stap is om het Excel-bestand met de experimentele data op een vaste locatie op je laptop op te slaan, bijvoorbeeld in een map genaamd raw_data. Vervolgens geef je het pad naar dit bestand in R en lees je het in met behulp van de functie read_excel() uit het readxl-pakket. Als extra controle kun je de ingelezen data weergeven in een tabelvorm met behulp van de reactable-functie. Onderstaande code laat zien hoe je dit doet: # Data inlezen data_path &lt;- &quot;raw_data/CE.LIQ.FLOW.062_Tidydata.xlsx&quot; data_celegans &lt;- read_excel(data_path) # Als controle laad de data in een data tabel formaat reactable(data_celegans, defaultPageSize = 5, compact = TRUE) 5.1.2 Stap 2: Inspecteren van de datatypes In deze stap controleer je of de kolommen van de dataset correct zijn ingelezen en of ze de goede datatype hebben. Dit is belangrijk, omdat foutieve datatypes — bijvoorbeeld een getal dat als tekst is ingelezen — problemen kunnen veroorzaken in de verdere analyse. Op basis van de inhoud van de dataset wordt verwacht dat RawData zal uit numerieke waarden (numeric) bestaan, compName uit tekst (character), en compConcentration ook numeriek zal zijn. Er zijn verschillende manieren om data te inspecteren. Ik laat hieronder twee methodes zien. Manier 1: De class() functie gebruiken per kolom Met de class() functie kun je het datatype van één specifieke kolom bekijken: # Inspecteer &quot;RawData&quot; m.b.v class class(data_celegans[[&quot;RawData&quot;]]) ## [1] &quot;numeric&quot; # Inspecteer &quot;compName&quot; m.b.v class class(data_celegans[[&quot;compName&quot;]]) ## [1] &quot;character&quot; # Inspecteer &quot;compConcentration&quot; m.b.v class class(data_celegans[[&quot;compConcentration&quot;]]) ## [1] &quot;character&quot; Manier 2: Meerdere kolommen tegelijk controleren met select() en map() Bij deze methode kies je meerdere kolommen tegelijk met select() uit het dplyr-pakket. Vervolgens pas je met map() uit het purrr-pakket de functie class() toe op elke kolom, zodat je van alle geselecteerde kolommen het datatype kan bekijken. # Inspecteer de datatypes m.b.v select en map data_celegans %&gt;% dplyr::select(RawData, compName, compConcentration) %&gt;% purrr::map(class) ## $RawData ## [1] &quot;numeric&quot; ## ## $compName ## [1] &quot;character&quot; ## ## $compConcentration ## [1] &quot;character&quot; 5.1.3 Stap 3: Datatype corrigeren Uit stap twee blijkt dat de kolom compConcentration als character (tekst) is ingelezen, terwijl verwacht dat dit een numeriek datatype zou zijn. Voor een correcte analyse en visualisatie is het belangrijk dat de concentraties als getallen worden herkend. Daarom zet je deze kolom nu om naar numeriek met behulp van mutate() uit het dplyr-pakket. # Zet compConcentration om van character naar numeric data_celegans &lt;- data_celegans %&gt;% mutate(compConcentration = as.numeric(compConcentration)) # Controleer of de omzetting is gelukt class(data_celegans[[&quot;compConcentration&quot;]]) ## [1] &quot;numeric&quot; 5.1.4 Stap 4: Scatter plot maken Bij deze stap kun je een scatter plot maken m.b.v ggplot om het effect van verschillende concentraties en chemicaliën op het aantal nakomelingen van C. elegans te visualiseren. De concentratie worden op de x-as (log10-schaal) en het aantal nakomelingen (RawData) op de y-as weergegeven. Elke chemische stof krijgt een eigen kleur en de controletype (expType) wordt weergegeven met verschillende symbolen. Door jitter toe te voegen voorkom je dat punten elkaar overlappen. # Maak scatterplot data_celegans_scatterplot &lt;- ggplot(data_celegans, aes(x = compConcentration, y = RawData, color = compName, shape = expType)) + # Voeg jitter toe om overlapping van punten te voorkomen geom_jitter(width = 0.1, height = 0, alpha = 0.7, size = 2) + # Zet x-as om naar log10-schaal voor betere spreiding scale_x_log10() + # Voeg labels toe labs(x = &quot;Concentratie (log10)&quot;, y = &quot;Aantal C. elegans nakomelingen&quot;, title = &quot;Effect van chemicaliën op het aantal nakomelingen bij C. elegans&quot;, color = &quot;Compound&quot;, shape = &quot;Type meting&quot;) + # Pas thema aan voor betere leesbaarheid theme_minimal() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) # laat de scatterplot zien data_celegans_scatterplot Figuur 1: Scatterplot resultaten. Op de y-as staat het aantal nakomelingen van C. elegans en op de x-as de log10 van de compoundconcentratie. Elke compound is aangeduid met een eigen kleur en per experimenttype (controle of test) is een ander symbool gebruikt. De punten zijn licht verschoven met jitter om overlapping te voorkomen. De positieve controle voor dit experiment is ethanol, weergegeven met een driehoekig symbool. Ethanol staat bekend om zijn remmende effect op de voortplanting en wordt gebruikt om de experimentele gevoeligheid aan te tonen. De negatieve controle is S-medium, aangeduid met een cirkel, dat geen effect heeft op de voortplanting en dus de basislijn vormt voor vergelijking. Er is een duidelijke negatieve correlatie te zien tussen de compoundconcentratie en het aantal nakomelingen. Hogere concentraties leiden tot minder nakomelingen, wat suggereert dat deze stoffen toxisch zijn voor de voortplanting. Vooral bij decane en bij de hoogste concentratie van naphthalene is het aantal nakomelingen sterk verminderd. 5.1.5 Stap 5: Normalizeren van de data voor de negatieve controle Om de gevoeligheid van C. elegans voor de verschillende chemicaliën beter te kwantificeren, moet de data worden genormalizeerd. # Filter de negatieve controle control_neg &lt;- data_celegans %&gt;% filter(expType == &quot;controlNegative&quot;) # Bereken het gemiddelde van de negatieve controle control_neg_mean &lt;- mean(control_neg$RawData, na.rm = TRUE) # Check het gemiddelde van de negatieve controle control_neg_mean ## [1] 85.9 # Normaliseer de data data_celegans_normalizeren &lt;- data_celegans %&gt;% mutate(normalized_RawData = RawData / control_neg_mean) # Check of de negatieve controle correct is genormaliseerd data_celegans_normalizeren_check &lt;- data_celegans_normalizeren %&gt;% filter(expType == &quot;controlNegative&quot;) # Bereken gemiddelde van de genormaliseerde negatieve controle data_celegans_normalizeren_check_gemiddelde &lt;- mean(data_celegans_normalizeren_check$normalized_RawData) # Bekijk of het gemiddelde ongeveer 1 is data_celegans_normalizeren_check_gemiddelde ## [1] 1 Wat is normalizeren en waarom normaliseren? Dit houdt in dat de waarden voor elke stof worden uitgedrukt als een fractie van de negatieve controle, waarbij de gemiddelde waarde van de negatieve controle (S-medium) wordt ingesteld op 1. Door deze normalisatie kunnen we de effecten van de verschillende chemicaliën op de voortplanting van de wormen direct vergelijken, ongeacht de absolute schaal van de gemeten waarden. Dit helpt om de variatie tussen de verschillende experimenten te verminderen en maakt het eenvoudiger om de relatieve toxiciteit van de chemicaliën te beoordelen. Maak nu een scatterplot met de genormaliseerde waarden. # maak een scatterplot met de genormaliseerde waarden ggplot(data_celegans_normalizeren, aes(x = compConcentration, y = normalized_RawData, color = compName)) + geom_point(alpha = 0.7) + theme_minimal() + labs( title = &quot;Genormaliseerde nakomelingen per concentratie&quot;, x = &quot;Concentratie van compound&quot;, y = &quot;Genormaliseerde nakomelingen C.elegans&quot; ) + scale_x_log10() # optioneel voor log schaal Figuur 2: Genormaliseerde nakomelingen C.elegans per concentratie voor verschillende chemicaliën. Deze scatterplot met genormaliseerde waarden is duidelijk veel beter dan een plot met ruwe data. (; 5.2 Stappenplan voor dose-response analyse Een typische analyse voor dit soort data is het uitvoeren van een dose-response analyse met een log-logistisch model om de IC50 concentratie te bepalen. Je kan met de dose-response curve voor elke compound bepalen wat de effecten van de verschillende chemicaliën (ethanol, decane, naphtalene en 2,6-diisopropylnaphthalene) op het aantal nakomelingen van C.elegans. Hierbij geef ik een korte stappenplan om te helpen bij het uitvoeren van de dose-response analyse. 5.2.1 Stap 1: Installeer en laad het drc-pakket Voor deze analyse maken we gebruik van het pakket drc. Hierbij de code voor het instaleren van de pakket en vergeet niet daarna de pakket te laden. install.packages(&quot;drc&quot;) # indien nog niet geïnstalleerd library(drc) # laad de librarie 5.2.2 Stap 2: Filter de data (verwijder NA’s en incomplete observaties) Voordat we de dose-response analyse uitvoeren, is het belangrijk om te zorgen dat we enkel complete observaties gebruiken. Daarom filteren we de data en verwijderen we rijen met ontbrekende waarden (NA) in de kolommen die relevant zijn voor de analyse: de genormaliseerde respons (normalized_RawData), de concentratie (compConcentration) en de naam van de verbinding (compName). data_celegans_filter &lt;- data_celegans_normalizeren %&gt;% filter(!is.na(normalized_RawData), !is.na(compConcentration), !is.na(compName)) 5.2.3 Stap 3: Dosis-respons modellen fitten We passen per verbinding (compound) een log-logistische 4-parameter (LL.4) model toe op de gegevens. Dit model wordt vaak gebruikt om de biologische respons bij verschillende doseringen te beschrijven. Voor elke stof maken we een apart modelobject aan. # Veronderstel dat je fit objecten hebt voor elke verbinding filter_ethanol &lt;- drm(normalized_RawData ~ compConcentration, data = data_celegans_filter %&gt;% filter(compName == &quot;Ethanol&quot;), fct = LL.4()) filter_decane &lt;- drm(normalized_RawData ~ compConcentration, data = data_celegans_filter %&gt;% filter(compName == &quot;decane&quot;), fct = LL.4()) filter_naphthalene &lt;- drm(normalized_RawData ~ compConcentration, data = data_celegans_filter %&gt;% filter(compName == &quot;naphthalene&quot;), fct = LL.4()) filter_diisopropylnaphthalene &lt;- drm(normalized_RawData ~ compConcentration, data = data_celegans_filter %&gt;% filter(compName == &quot;2,6-diisopropylnaphthalene&quot;), fct = LL.4()) 5.2.4 Stap 4: Bepaal de IC50-waarden De IC50 is de concentratie waarbij de helft van het maximale effect wordt bereikt. Dit is een belangrijke maat voor toxiciteit: hoe lager de IC50, hoe toxischer de stof. Hier berekenen we de IC50 voor elke verbinding op basis van het model dat we net fitten. # Bereken IC50 voor elke verbinding IC50_ethanol &lt;- ED(filter_ethanol, 50)[1] ## ## Estimated effective doses ## ## Estimate Std. Error ## e:1:50 1.1907 NaN IC50_decane &lt;- ED(filter_decane, 50)[1] ## ## Estimated effective doses ## ## Estimate Std. Error ## e:1:50 0.119453 0.042934 IC50_naphthalene &lt;- ED(filter_naphthalene, 50)[1] ## ## Estimated effective doses ## ## Estimate Std. Error ## e:1:50 3.129 NaN IC50_diisopropylnaphthalene &lt;- ED(filter_diisopropylnaphthalene, 50)[1] ## ## Estimated effective doses ## ## Estimate Std. Error ## e:1:50 0.025072 0.010998 5.2.5 Stap 5: Overzichtstabel van IC50-waarden Hier tonen we de IC50-waarden overzichtelijk in een tabel. Dit helpt om snel te zien welke verbinding het meest toxisch is. tibble_IC50 &lt;- tibble( Compound = c(&quot;Ethanol&quot;, &quot;Decane&quot;, &quot;Naphthalene&quot;, &quot;2,6-diisopropylnaphthalene&quot;), IC50 = c(IC50_ethanol, IC50_decane, IC50_naphthalene, IC50_diisopropylnaphthalene) ) %&gt;% knitr::kable() tibble_IC50 Compound IC50 Ethanol 1.1907273 Decane 0.1194530 Naphthalene 3.1289885 2,6-diisopropylnaphthalene 0.0250723 5.2.6 Stap 6: Dosis-respons curves combineren in één figuur Hier visualiseren we de dose-response curves van alle vier verbindingen samen in één figuur. De curves geven aan hoe de respons van C. elegans verandert bij oplopende concentraties van een stof. We gebruiken een log-schaal voor de x-as en geven elke stof een unieke kleur. De legenda toont de bijbehorende IC50-waarden. # Plot eerste curve (ethanol) als basis plot( filter_ethanol, type = &quot;all&quot;, log = &quot;x&quot;, col = &quot;orange&quot;, ylim = c(0, 1.5), xlim = c(0.01, max(data_celegans_filter$compConcentration, na.rm = TRUE)), xlab = &quot;Concentratie (log)&quot;, ylab = &quot;Respons&quot;, main = &quot;Dosis-response curves&quot; ) # Voeg andere curves toe in nieuwe kleuren plot(filter_decane, add = TRUE, col = &quot;darkblue&quot;, type = &quot;all&quot;) # decane plot(filter_naphthalene, add = TRUE, col = &quot;turquoise3&quot;, type = &quot;all&quot;) # naphthalene plot(filter_diisopropylnaphthalene, add = TRUE, col = &quot;deeppink&quot;,type = &quot;all&quot;) # 2,6-diisopropylnaphthalene # Voeg legenda toe met IC50-waarden legend(&quot;topright&quot;, legend = c( paste(&quot;Ethanol:&quot;, round(IC50_ethanol, 2)), paste(&quot;Decane:&quot;, round(IC50_decane, 2)), paste(&quot;Naphthalene:&quot;, round(IC50_naphthalene, 2)), paste(&quot;2,6-diisopropylnaphthalene:&quot;, round(IC50_diisopropylnaphthalene, 2)) ), col = c(&quot;orange&quot;, &quot;darkblue&quot;, &quot;turquoise3&quot;, &quot;deeppink&quot;), lty = 1) Figuur 3: Samengestelde dosis-responscurve. In deze figuur zijn de dosis-responscurves van vier verschillende chemische verbindingen weergegeven. Op de x-as staat de logaritmische concentratie van de stof, en op de y-as de genormaliseerde respons (aantal nakomelingen van C. elegans). Elke curve toont hoe de respons verandert met toenemende concentratie. 5.2.7 Stap 7: Eén curve per stof (optioneel) Naast de gecombineerde plot kunnen we ook voor elke stof afzonderlijk de dosis-respons curve bekijken. Dit kan handig zijn voor meer gedetailleerde inspectie van de fits. # Voor ethanol plot(filter_ethanol, type = &quot;all&quot;, log = &quot;x&quot;, col = &quot;orange&quot;, main = &quot;Dose-response curve Ethanol&quot;, xlab = &quot;Concentratie&quot;, ylab = &quot;Genormaliseerde nakomelingen&quot;) Figuur 4: Dosis-responscurves (Ethanol) # Voor decane plot(filter_decane, type = &quot;all&quot;, log = &quot;x&quot;, col = &quot;darkblue&quot;, main = &quot;Dose-response curve Decane&quot;, xlab = &quot;Concentratie&quot;, ylab = &quot;Genormaliseerde nakomelingen&quot;) Figuur 5: Dosis-responscurves (Decane) # Voor naphthalene plot(filter_naphthalene, type = &quot;all&quot;, log = &quot;x&quot;, col = &quot;turquoise3&quot;, main = &quot;Dose-response curve Naphthalene&quot;, xlab = &quot;Concentratie&quot;, ylab = &quot;Genormaliseerde nakomelingen&quot;) Figuur 6: Dosis-responscurves (Naphthalene) # Voor 2,6-diisopropylnaphthalene plot(filter_diisopropylnaphthalene, type = &quot;all&quot;, log = &quot;x&quot;, col = &quot;deeppink&quot;, main = &quot;Dose-response curve 2,6-diisopropylnaphthalene&quot;, xlab = &quot;Concentratie&quot;, ylab = &quot;Genormaliseerde nakomelingen&quot;) Figuur 7: Dosis-responscurves (2,6-diisopropylnaphthalene) 5.2.8 conclusie In deze dosis-responsanalyse hebben we de IC50-waarden bepaald voor vier chemische verbindingen op basis van hun effect op C. elegans. De IC50 (de concentratie waarbij 50% van het maximale effect wordt bereikt) geeft een indicatie van de toxiciteit van een stof: hoe lager de IC50, hoe toxischer de stof is voor de wormen. Uit de resultaten blijkt het volgende: 2,6-diisopropylnaphthalene heeft de laagste IC50 (~0.025), wat wijst op een zeer hoge toxiciteit. Decane heeft ook een relatief lage IC50 (~0.12), wat duidt op matige tot hoge toxiciteit. Ethanol laat een hogere IC50 zien (~1.19), en is dus minder toxisch in vergelijking met de vorige twee. Naphthalene heeft de hoogste IC50 (~3.13), wat suggereert dat het de minst toxische stof is van de vier. Deze resultaten geven waardevolle inzicht in de relatieve toxiciteit van deze verbindingen voor C. elegans en vormen een basis voor verder toxicologisch onderzoek. 5.3 Wetenschappelijke Referenties 5.3.1 1. Ethanol en effecten op C. elegans voortplanting: Ethanol-induced reproductive toxicity in C. elegans PubMed-abstract over de effecten van ethanol op de voortplanting van C. elegans. Ethanol as a positive control for reproductive toxicity studies PubMed-abstract over ethanol als positieve controle in toxiciteitsstudies bij C. elegans. 5.3.2 2. Decaan en naphthaleen als toxische stoffen: Toxicity of aliphatic hydrocarbons, including decane Article op ScienceDirect over de toxiciteit van alifatische koolwaterstoffen, waaronder decaan. Toxicological impact of naphthalene on C. elegans PubMed-abstract over de toxische effecten van naphthaleen op C. elegans. 5.3.3 3. Dosis-responscurves en IC50-waarde bepaling: Introduction to IC50 Uitleg over IC50-bepaling en dosis-responsanalyse op NCBI. Dose-response relationship in toxicology and pharmacology PubMed-abstract over de dosis-responsrelatie in toxicologie en farmacologie. 5.3.4 4. S-medium als controle in biologische experimenten: S-medium in C. elegans experiments Artikel op SpringerLink over het gebruik van S-medium voor C. elegans-experimenten. "],["reproduceerbare-analyse-2.html", "6 Reproduceerbare Analyse 2 6.1 Artikel beoordelen op reproduceerbaarheid", " 6 Reproduceerbare Analyse 2 6.1 Artikel beoordelen op reproduceerbaarheid "],["structured-query-language.html", "7 Structured Query Language", " 7 Structured Query Language "],["r-package.html", "8 R package 8.1 Documentatie van mijn R package: ministate 8.2 Voorbeeld voor het gebruiken van de package", " 8 R package 8.1 Documentatie van mijn R package: ministate 8.1.1 Inleiding Dit document beschrijft de stappen die ik heb gevolgd om mijn eigen R package ministate te maken. Het doel van dit package is om eenvoudige statistische functies te bundelen in een handig en herbruikbaar pakket. Het package bevat functies voor statistische berekeningen, zoals gemiddelde, mediaan, modus, standaarddeviatie, en een overzichtelijke samenvattingstabel. 8.1.2 1. Opzetten van het project Ik heb in RStudio een nieuw R Project aangemaakt: usethis::create_package(&quot;ministate&quot;) Daarna heb ik Git gekoppeld aan mijn project: usethis::use_git() usethis::use_github() Op GitHub is de repository te vinden via: https://github.com/Amal189/ministate_package 8.1.3 2. Toevoegen van functies Ik heb 11 functies toegevoegd. Elke functie bevindt zich in een aparte .R file in de R/ map. De functies zijn voorzien van roxygen2 documentatie. 8.1.3.1 Voorbeeld: gem.R #&#39; Bereken het gemiddelde #&#39; #&#39; @param x Een numerieke vector #&#39; @return Het gemiddelde #&#39; @export gem &lt;- function(x) { mean(x, na.rm = TRUE) } Na het schrijven van de functies heb ik de documentatie gegenereerd met: devtools::document() 8.1.4 3. Testen van functies De functies zijn getest binnen RStudio: x &lt;- c(1, 2, 2, 3, NA) # Basisstatistieken gem(x) med(x) modus(x) n(x) mini(x) maxi(x) spreid(x) kwartielen(x) iqr(x) sdev(x) sam(x) 8.1.5 4. Vignette aanmaken Een vignette is een handleiding voor gebruikers. Deze heb ik aangemaakt met: usethis::use_vignette(&quot;ministate&quot;) Ik kan het vignette openen met: browseVignettes(&quot;ministate&quot;) 8.1.6 5. DESCRIPTION bestand Mijn DESCRIPTION bestand bevat de volgende informatie: Package: ministate Type: Package Title: Minianalyse van statistische functies Version: 0.1.0 Authors@R: person( given = &quot;Amal&quot;, email = &quot;Jasmijnbloem@gmail.com&quot;, role = c(&quot;aut&quot;, &quot;cre&quot;)) Description: functies voor statistische berekeningen, zoals gemiddelde, mediaan, modus, standaarddeviatie, en een overzichtelijke samenvattingstabel. License: MIT + file LICENSE Encoding: UTF-8 RoxygenNote: 7.3.2 Suggests: knitr, rmarkdown VignetteBuilder: knitr 8.1.7 6. Package bouwen en checken Voor het bouwen en controleren van mijn package gebruik ik: devtools::build() devtools::check() Let op: op Windows is het belangrijk dat Rtools is geïnstalleerd: Download hier: https://cran.r-project.org/bin/windows/Rtools/ 8.1.8 7. GitHub koppeling De koppeling met GitHub is gelukt via: git init git remote add origin https://github.com/Amal189/ministat_package.git git push -u origin master Daarna zijn alle bestanden gecommit en gepusht naar GitHub. 8.1.9 Conclusie Met dit project heb ik geleerd hoe ik een R package opzet, functies schrijf en documenteer, een vignette toevoeg, en het geheel beschikbaar maak via GitHub. Dit zijn waardevolle vaardigheden voor het delen van analyses en functies in de data science en bioinformatica wereld. 8.2 Voorbeeld voor het gebruiken van de package De faithful dataset bevat meetwaarden van eruptieduur (in minuten) van geisers in Yellowstone.Hier passen we onze functies toe op de eruptions kolom om basisstatistieken te berekenen en een overzichtstabel te maken. # Data uit R: geisers eruptie duur devtools::install_github(&quot;Amal189/ministate_package&quot;) library(ministate) data(&quot;faithful&quot;) x &lt;- faithful$eruptions # Statistieken toepassen gem(x) ## [1] 3.487783 med(x) ## [1] 4 modus(x) ## [1] 1.867 n(x) ## [1] 272 mini(x) ## [1] 1.6 maxi(x) ## [1] 5.1 spreid(x) ## [1] 3.5 kwartielen(x) ## 25% 75% ## 2.16275 4.45425 iqr(x) ## [1] 2.2915 sdev(x) ## [1] 1.141371 sam(x) "],["geparameteriseerd-covid-19-europa-rapport.html", "9 Geparameteriseerd COVID-19 Europa rapport 9.1 Geparameteriseerd data verwerken 9.2  Interactieve Quiz: Wat weet je van de COVID-data?", " 9 Geparameteriseerd COVID-19 Europa rapport 9.1 Geparameteriseerd data verwerken In dit hoofdstuk wordt het verloop van de COVID-19-pandemie geanalyseerd op basis van gegevens uit Europa. Het rapport is geparametriseerd, wat betekent dat je zelf kunt kiezen voor welk land, welk jaar en welke maand(en) je de informatie wilt bekijken. Op basis van deze keuzes worden de relevante gegevens gefilterd en weergegeven in grafieken. Er worden twee kerncijfers gevisualiseerd: Het aantal bevestigde COVID-19 gevallen per dag. Het aantal COVID-19 gerelateerde sterfgevallen per dag. Deze aanpak maakt het mogelijk om snel en flexibel inzicht te krijgen in de ontwikkeling van de pandemie binnen een specifieke context. 9.1.1 Stap 1: Laad de benodigde libraries # Laad de benodigde packages library(tidyverse) # bevat ggplot2 en dplyr library(readxl) # om Excel-bestanden te lezen library(lubridate) # voor datumverwerking indien nodig library(dplyr) library(ggplot2) library(utils) library(gganimate) library(gifski) 9.1.2 Stap 2: Download en verwerk de data De gegevens die in dit hoofdstuk worden gebruikt, zijn afkomstig van het European Centre for Disease Prevention and Control (ECDC). Deze dataset bevat dagelijkse meldingen van COVID-19 besmettingen en sterfgevallen in Europese landen. Bij het inlezen van de data worden datums correct geïnterpreteerd met behulp van het lubridate-pakket. # Download en verwerk data data &lt;- read.csv(&quot;https://opendata.ecdc.europa.eu/covid19/nationalcasedeath_eueea_daily_ei/csv&quot;, na.strings = &quot;&quot;, fileEncoding = &quot;UTF-8-BOM&quot;) %&gt;% mutate(date = dmy(dateRep), month = month(date), year = year(date)) 9.1.3 Stap 3: Foutafhandeling Om te voorkomen dat het rapport fout loopt bij ongeldige invoer, zijn er controles ingebouwd. Deze controleren of het opgegeven land, jaar en de maanden daadwerkelijk voorkomen in de dataset. # Land-validatie if (!(params$land %in% unique(data$countriesAndTerritories))) { stop(&quot;Het gekozen land komt niet voor in de dataset.&quot;) } # Jaar- en maand-validatie if (!(params$jaar %in% unique(data$year))) { stop(&quot;Het gekozen jaar komt niet voor in de dataset.&quot;) } if (!any(params$maanden %in% unique(data$month))) { stop(&quot;Geen van de gekozen maanden komt voor in de dataset.&quot;) } 9.1.4 Stap 4: Filter de data De data filteren op basis van het gekozen land, jaar en de geselecteerde maand(en). # Filteren filtered_data &lt;- data %&gt;% filter(countriesAndTerritories == params$land, year == params$jaar, month %in% params$maanden) %&gt;% arrange(date) 9.1.5 Stap 5: Het analyseren van de data De volgende grafiek toont het aantal bevestigde COVID-19 gevallen per dag in de opgegeven periode. 9.1.5.1 Aantal COVID-19 gevallen per dag Analyse voor Romania - 2020 De volgende grafieken tonen de COVID-19 data voor: Land: Romania Jaar: 2020 Maand(en): 5 # Maak een lijnplot van het aantal bevestigde gevallen per dag ggplot(filtered_data, aes(x = date, y = cases)) + geom_line(color = &quot;steelblue&quot;) + labs(title = paste(&quot;COVID-19 gevallen in&quot;, params$land, &quot;in&quot;, params$jaar), subtitle = paste(&quot;Maand(en):&quot;, paste(params$maanden, collapse = &quot;, &quot;)), x = &quot;Datum&quot;, y = &quot;Aantal gevallen&quot;) + theme_minimal() Een stijgende lijn kan wijzen op een uitbraak of onvoldoende maatregelen. Afnemende waarden kunnen wijzen op doeltreffende interventies of onderrapportage. Houd er rekening mee dat testen en rapportagebeleid per land kunnen verschillen. 9.1.5.2 Aantal COVID-19 sterfgevallen per dag De volgende grafiek toont het aantal bevestigde COVID-19 sterfgevallen per dag in de opgegeven periode.’ Analyse voor Romania - 2020 De volgende grafieken tonen de COVID-19 data voor: Land: Romania Jaar: 2020 Maand(en): 5 ggplot(filtered_data, aes(x = date, y = deaths)) + geom_line(color = &quot;#d62728&quot;) + labs(title = paste(&quot;Dagelijkse COVID-19 sterfgevallen in&quot;, params$land), subtitle = paste(&quot;Jaar:&quot;, params$jaar, &quot;| Maand(en):&quot;, paste(params$maanden, collapse = &quot;, &quot;)), x = NULL, y = &quot;Aantal sterfgevallen&quot;) + theme_minimal() + scale_x_date(date_labels = &quot;%d %b&quot;) 9.1.5.3 Beschikbaarheid van gegevens Hier bij wordt aangegeven hoeveel dagen data beschikbaar is voor de gekozen periode # Toon hoeveel dagen data beschikbaar is voor de gekozen periode paste(&quot;Aantal dagen met gegevens in deze selectie:&quot;, nrow(filtered_data)) ## [1] &quot;Aantal dagen met gegevens in deze selectie: 31&quot; 9.2  Interactieve Quiz: Wat weet je van de COVID-data? In dit onderdeel testen we je kennis van de geselecteerde gegevens. De antwoorden worden automatisch gegenereerd op basis van de data voor: Land: Romania Jaar: 2020 Maand(en): 5 9.2.1 Vraag 1: Hoeveel dagen zijn er met gegevens in deze selectie? aantal_dagen &lt;- nrow(filtered_data) paste(&quot;Aantal dagen met gegevens:&quot;, aantal_dagen) ## [1] &quot;Aantal dagen met gegevens: 31&quot; 9.2.2 Vraag 2: Hoeveel besmettingen zijn er in totaal gemeld? totaal_besmettingen &lt;- sum(filtered_data$cases, na.rm = TRUE) paste(&quot;Totaal aantal bevestigde gevallen:&quot;, totaal_besmettingen) ## [1] &quot;Totaal aantal bevestigde gevallen: 7017&quot; 9.2.3 Vraag 3: Wat was het hoogste aantal besmettingen op één dag? max_cases &lt;- max(filtered_data$cases, na.rm = TRUE) max_datum &lt;- filtered_data$date[which.max(filtered_data$cases)] paste(&quot;Hoogste aantal besmettingen op één dag:&quot;, max_cases, &quot;op&quot;, format(max_datum, &quot;%d %B %Y&quot;)) ## [1] &quot;Hoogste aantal besmettingen op één dag: 431 op 03 mei 2020&quot; 9.2.4 Vraag 4: Hoe ziet het verloop van besmettingen eruit? ggplot(filtered_data, aes(x = date, y = cases)) + geom_col(fill = &quot;steelblue&quot;) + labs(title = &quot;Besmettingen per dag&quot;, x = &quot;Datum&quot;, y = &quot;Aantal gevallen&quot;) + theme_minimal() 9.2.5 Vraag 5: Hoe ziet het verloop van sterfgevallen eruit? ggplot(filtered_data, aes(x = date, y = deaths)) + geom_col(fill = &quot;#d62728&quot;) + labs(title = &quot;Sterfgevallen per dag&quot;, x = &quot;Datum&quot;, y = &quot;Aantal overlijdens&quot;) + theme_minimal() "],["project-introductie.html", "10 Project introductie 10.1 minION sequencing", " 10 Project introductie 10.1 minION sequencing RNA-sequencing is een techniek waarmee onderzoekers kunnen meten welke genen actief zijn in een cel. De MinION-sequencer van Oxford Nanopore Technologies is een nieuwe generatie sequencingtechnologie die het mogelijk maakt om lange RNA-fragmenten in één keer te lezen (Jain et al. 2016). In dit project wordt RNA-sequencing data van MCF7-borstkankercellen geanalyseerd. Het doel is om de kwaliteit van de data te beoordelen en om te onderzoeken of deze geschikt is voor het analyseren van genexpressie. Traditionele RNA-sequencing methoden, zoals die van Illumina, produceren korte reads die vaak onvoldoende informatie geven over volledige RNA-transcripten (Wang, Gerstein, and Snyder 2009). Lange reads van de MinION maken het mogelijk om complete genvarianten te identificeren, wat nuttig is bij onderzoek naar alternatieve splicing en genexpressie (Byrne 2017). Omdat de foutenmarge van de MinION hoger is dan bij short-read technologieën, is kwaliteitscontrole een belangrijke eerste stap (De Coster et al. 2018). Voor deze analyse wordt gebruikgemaakt van openbare data die eerder is gegenereerd door Chen et al. (2021), waarin RNA uit MCF7-cellen is gesekveneerd met de MinION (Chen, Zhang, and Zhu 2021). De workflow begint met kwaliteitscontrole van de ruwe sequencing data met behulp van NanoFilt en NanoPlot (De Coster et al. 2018). Vervolgens worden de RNA-reads uitgelijnd op het humane genoom met Minimap2, een aligner die geschikt is voor lange reads en splicing-herkenning (Li 2018). Daarna wordt het expressieniveau van genen bepaald met behulp van Bambu, een tool die ontworpen is voor transcriptidentificatie en kwantificatie in long-read RNA-seq data (Kaminow, Yanai, and Gresham 2021). De differentiële genexpressie wordt geanalyseerd met DESeq2, een veelgebruikte methode binnen de bioinformatica (Love, Huber, and Anders 2014). Tot slot worden de resultaten gevisualiseerd met PCA-plots, heatmaps en scatterplots. Deze visualisaties geven inzicht in verschillen in genexpressie en in de bruikbaarheid van lange-read sequencing data bij transcriptomics-onderzoek. Figuur 1: Workflow voor RNA-seq data-analyse. De onderstaande figuur toont een overzicht van een typische workflow voor de analyse van RNA-sequencing (RNA-seq) data, zoals uitgevoerd in dit project. Deze workflow is gebaseerd op het materiaal uit de cursus Data Science for Biology 1 (DSFB1). "],["referenties.html", "11 Referenties", " 11 Referenties Byrne, Andrew et al. 2017. “Nanopore Long-Read RNAseq Reveals Widespread Transcriptional Variation Among the Surface Receptors of Individual b Cells.” Nature Communications 8 (1): 16027. https://doi.org/10.1038/ncomms16027. Chen, X, Y Zhang, and Z Zhu. 2021. “High-Throughput Long-Read RNA Sequencing of Human Transcriptomes with eCLIP.” Nature Biotechnology 39 (7): 750–60. https://doi.org/10.1038/s41587-020-00791-4. De Coster, Wouter, Sophie D’Hert, David T Schultz, Marc Cruts, and Christine Van Broeckhoven. 2018. “NanoPack: Visualizing and Processing Long-Read Sequencing Data.” Bioinformatics 34 (15): 2666–69. https://doi.org/10.1093/bioinformatics/bty149. Jain, Miten, Heather E Olsen, Benedict Paten, and Mark Akeson. 2016. “The Oxford Nanopore MinION: Delivery of Nanopore Sequencing to the Genomics Community.” Genome Biology 17 (1): 1–11. https://doi.org/10.1186/s13059-016-1103-0. Kaminow, Brennan, Itai Yanai, and David Gresham. 2021. “Bambu: Transcript Discovery and Quantification from Long-Read RNA-Seq Data.” Genome Biology 22 (1): 1–24. https://doi.org/10.1186/s13059-021-02507-3. Li, Heng. 2018. “Minimap2: Pairwise Alignment for Nucleotide Sequences.” Bioinformatics 34 (18): 3094–3100. https://doi.org/10.1093/bioinformatics/bty191. Love, Michael I, Wolfgang Huber, and Simon Anders. 2014. “Moderated Estimation of Fold Change and Dispersion for RNA-Seq Data with DESeq2.” Genome Biology 15 (12): 550. https://doi.org/10.1186/s13059-014-0550-8. Wang, Zhong, Mark Gerstein, and Michael Snyder. 2009. “RNA-Seq: A Revolutionary Tool for Transcriptomics.” Nature Reviews Genetics 10 (1): 57–63. https://doi.org/10.1038/nrg2484. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
